name: Deployment

on:
  push:
    branches:
     - "main"

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: tite-5g00ev16-3003/practice-project-backend-juuso-finne
  FRONTEND_IMAGE_NAME: tite-5g00ev16-3003/practice-project-frontend-juuso-finne

jobs:
  build:
    name: Build images
    timeout-minutes: 5
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Fetch code
        uses: actions/checkout@v4.1.1

      - name: Install Node
        uses: actions/setup-node@v4.0.2

        with:
          node-version: "18"

      - name: Set up QEmu
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push the Backend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}"


      - name: Create production .env file from secret
        run: echo "${{ secrets.ENV_FILE_PROD }}" > ./frontend/.env

      - name: Build the Frontend Image
        uses: docker/build-push-action@v5.0.0
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}"


  # Workflow for deploying the containers on the server
  deploy:
    name: Server Deployment
    timeout-minutes: 5
    needs: build

    permissions:
      contents: read
      packages: write

    runs-on: ubuntu-latest

    steps:
      # Fetch the code using the checkout action
      - name: Fetch Code
        uses: actions/checkout@v4.1.1

      # Install OpenVPN to be able to connect to the VM server
      - name: Install OpenVPN and RSync
        run: |
          sudo apt update
          sudo apt --assume-yes --no-install-recommends install openvpn openvpn-systemd-resolved rsync

      # Create OpenVPN configuration files
      - name: Setup VPN config
        run: |
          echo "${{ secrets.VPN_PASSWORD }}" > secret.txt
          echo "${{ secrets.VPN_CONFIG }}" > config.ovpn

      # Start the VPN connection
      - name: Connect VPN
        run: sudo openvpn --config config.ovpn --daemon --log vpn.log

      # Helper command to make sure the VPN connection is up before continueing
      - name: Wait for a VPN connection
        timeout-minutes: 1
        run: until ping -c1 ${{ secrets.REMOTE_SERVER }}; do sleep 10; done

      # Steps needed for getting SSH to connect
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DEPLOY_KEY_PRIVATE }}" | base64 -d > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.REMOTE_SERVER }} >> ~/.ssh/known_hosts

      - name: Create and sync Container configs
        run: |
          mkdir -p final_project
          cp docker-compose.server.yml final_project/docker-compose.yml
          mkdir -p final_project/db/
          cp db/init.prod.sql final_project/db/
          echo "${{ secrets.ENV_FILE_PROD }}" > final_project/.env
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}" >> final_project/.env
          echo "FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}" >> final_project/.env
          rsync -r final_project "${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}:./"

      - name: Start the containers via ssh
        run: ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_SERVER }}
          "
          docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }};
          cd final_project;
          docker-compose pull;
          docker-compose up -d
          "

      # Close the VPN connection
      - name: Kill VPN connection
        if: always()
        run: |
          sudo chmod 777 vpn.log
          sudo killall openvpn
